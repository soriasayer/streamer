{"ast":null,"code":"var _jsxFileName = \"/Users/aemalsayer/Desktop/Excercise/JavaScript/my-projects/Udemy/twich-clone/client/src/component/streams/StreamCreate.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.errors && meta.touched ? 'error' : ''}`;\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  onSubmit(formValue) {\n    console.log(formValue);\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title.';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description.';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'createStream',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/aemalsayer/Desktop/Excercise/JavaScript/my-projects/Udemy/twich-clone/client/src/component/streams/StreamCreate.js"],"names":["React","Component","Field","reduxForm","StreamCreate","renderInput","input","label","meta","className","errors","touched","renderError","error","onSubmit","formValue","console","log","render","props","handleSubmit","validate","formValues","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAWjCI,WAXiC,GAWnB,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA0B;AACpC,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACE,MAAL,IAAeF,IAAI,CAACG,OAApB,GAA8B,OAA9B,GAAwC,EAAI,EAAvE;AACA,aACI;AAAK,QAAA,SAAS,EAAEF,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQF,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGK,KAAKM,WAAL,CAAiBJ,IAAjB,CAHL,CADJ;AAOH,KApBgC;AAAA;;AACjCI,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAQF,IAAAA;AAAR,GAAD,EAAmB;AAC1B,QAAGA,OAAO,IAAIE,KAAd,EAAqB;AACjB,aACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADJ,CADJ;AAKH;AACJ;;AAaDC,EAAAA,QAAQ,CAACC,SAAD,EAAY;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AACC,MAAA,SAAS,EAAE,KAAKT,WADjB;AAEC,MAAA,KAAK,EAAC,aAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAKI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AACC,MAAA,SAAS,EAAE,KAAKA,WADjB;AAEC,MAAA,KAAK,EAAC,mBAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EASI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ,CADJ;AAaH;;AAxCgC;;AA2CrC,MAAMgB,QAAQ,GAAIC,UAAD,IAAgB;AAC7B,QAAMZ,MAAM,GAAG,EAAf;;AACA,MAAG,CAACY,UAAU,CAACC,KAAf,EAAsB;AAClBb,IAAAA,MAAM,CAACa,KAAP,GAAe,yBAAf;AACH;;AAED,MAAG,CAACD,UAAU,CAACE,WAAf,EAA4B;AACxBd,IAAAA,MAAM,CAACc,WAAP,GAAqB,+BAArB;AACH;;AACD,SAAOd,MAAP;AACH,CAVD;;AAYA,eAAeP,SAAS,CAAC;AACrBsB,EAAAA,IAAI,EAAE,cADe;AAErBJ,EAAAA;AAFqB,CAAD,CAAT,CAGZjB,YAHY,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Field, reduxForm } from 'redux-form'\n\nclass StreamCreate extends Component {\n    renderError({error, touched}) {\n        if(touched && error) {\n            return(\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            )\n        }\n    }\n\n    renderInput = ({input, label, meta}) => {\n        const className = `field ${meta.errors && meta.touched ? 'error' : '' }`\n        return (\n            <div className={className}>\n                <label>{label}</label>\n                <input {...input} autoComplete='off' />\n                {this.renderError(meta)}\n            </div>\n        )\n    }\n\n    onSubmit(formValue) {\n        console.log(formValue)\n    }\n\n    render() {\n        return(\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field name='title'\n                 component={this.renderInput}\n                 label=\"Enter Title\"\n                />\n                <Field name='description'\n                 component={this.renderInput}\n                 label=\"Enter Description\"\n                />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        )\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {}\n    if(!formValues.title) {\n        errors.title = 'You must enter a title.'\n    }\n\n    if(!formValues.description) {\n        errors.description = 'You must enter a description.'\n    }\n    return errors\n}\n\nexport default reduxForm({\n    form: 'createStream',\n    validate\n})(StreamCreate)"]},"metadata":{},"sourceType":"module"}