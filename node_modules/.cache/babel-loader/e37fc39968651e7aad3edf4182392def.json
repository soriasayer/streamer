{"ast":null,"code":"var _jsxFileName = \"/Users/aemalsayer/Desktop/Excercise/JavaScript/my-projects/Udemy/twich-clone/client/src/component/streams/StreamCreate.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends Component {\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  renderInput({\n    input,\n    label,\n    meta\n  }) {\n    return React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, label), React.createElement(\"input\", Object.assign({}, input, {\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    })), this.renderError(meta));\n  }\n\n  onSubmit(formValue) {\n    console.log(formValue);\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title.';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description.';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'createStream',\n  validate\n})(StreamCreate);","map":{"version":3,"sources":["/Users/aemalsayer/Desktop/Excercise/JavaScript/my-projects/Udemy/twich-clone/client/src/component/streams/StreamCreate.js"],"names":["React","Component","Field","reduxForm","StreamCreate","renderError","error","touched","renderInput","input","label","meta","onSubmit","formValue","console","log","render","props","handleSubmit","validate","formValues","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;AAEA,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AACjCI,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAmB;AAC1B,QAAGA,OAAO,IAAID,KAAd,EAAqB;AACjB,aACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADJ,CADJ;AAKH;AACJ;;AAEDE,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAD,EAAuB;AAC9B,WACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQD,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,MAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFJ,EAGK,KAAKJ,WAAL,CAAiBM,IAAjB,CAHL,CADJ;AAOH;;AAEDC,EAAAA,QAAQ,CAACC,SAAD,EAAY;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AACC,MAAA,SAAS,EAAE,KAAKJ,WADjB;AAEC,MAAA,KAAK,EAAC,aAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAKI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AACC,MAAA,SAAS,EAAE,KAAKA,WADjB;AAEC,MAAA,KAAK,EAAC,mBAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EASI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ,CADJ;AAaH;;AAvCgC;;AA0CrC,MAAMW,QAAQ,GAAIC,UAAD,IAAgB;AAC7B,QAAMC,MAAM,GAAG,EAAf;;AACA,MAAG,CAACD,UAAU,CAACE,KAAf,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,yBAAf;AACH;;AAED,MAAG,CAACF,UAAU,CAACG,WAAf,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,+BAArB;AACH;;AACD,SAAOF,MAAP;AACH,CAVD;;AAYA,eAAelB,SAAS,CAAC;AACrBqB,EAAAA,IAAI,EAAE,cADe;AAErBL,EAAAA;AAFqB,CAAD,CAAT,CAGZf,YAHY,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Field, reduxForm } from 'redux-form'\n\nclass StreamCreate extends Component {\n    renderError({error, touched}) {\n        if(touched && error) {\n            return(\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            )\n        }\n    }\n    \n    renderInput({input, label, meta}) {\n        return (\n            <div className=\"field\">\n                <label>{label}</label>\n                <input {...input} autoComplete='off' />\n                {this.renderError(meta)}\n            </div>\n        )\n    }\n\n    onSubmit(formValue) {\n        console.log(formValue)\n    }\n\n    render() {\n        return(\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form\">\n                <Field name='title'\n                 component={this.renderInput}\n                 label=\"Enter Title\"\n                />\n                <Field name='description'\n                 component={this.renderInput}\n                 label=\"Enter Description\"\n                />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        )\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {}\n    if(!formValues.title) {\n        errors.title = 'You must enter a title.'\n    }\n\n    if(!formValues.description) {\n        errors.description = 'You must enter a description.'\n    }\n    return errors\n}\n\nexport default reduxForm({\n    form: 'createStream',\n    validate\n})(StreamCreate)"]},"metadata":{},"sourceType":"module"}